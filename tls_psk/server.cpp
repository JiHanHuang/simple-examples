// server端
//  参考：https://strawberrytree.top/blog/2020/09/17/%E4%BD%BF%E7%94%A8openssl%E4%BD%BF%E7%94%A8%E5%A4%96%E9%83%A8psk%E8%BF%9B%E8%A1%8C%E6%8F%A1%E6%89%8B%EF%BC%88tls1-3%EF%BC%89/
// g++ server-simple.cpp -o server-simple -I /usr/local/include -L
// /usr/local/lib64 -lssl -lcrypto

#include <arpa/inet.h>
#include <cstddef>
#include <openssl/err.h>
#include <openssl/ocsp.h>
#include <openssl/ssl.h>
#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <unistd.h>
#define PSK_KEY    "786c69646a673277332d742a552940786761313534"
#define PSK_UTF8_KEY      "xlidjg2w3-t*U)@xga154"
#define PSK_ID            "Client1"
#define AES256SHA384      1
#define AES128SHA256      2
#define CURR_CIPHERSUITES AES256SHA384
// #define CURR_CIPHERSUITES AES128SHA256

// #define USEING_PSK

void report_error(const char *e_log) {
    perror(e_log);
    exit(EXIT_FAILURE);
}

int create_socket(int port) {
    int s;
    struct sockaddr_in addr;
    memset(&addr, 0, sizeof(addr));

    addr.sin_family      = AF_INET;
    addr.sin_port        = htons(port);
    addr.sin_addr.s_addr = htonl(INADDR_ANY);

    s = socket(PF_INET, SOCK_STREAM, 0);
    if (s < 0) {
        perror("Unable to create socket");
        exit(EXIT_FAILURE);
    }

    if (bind(s, (struct sockaddr *)&addr, sizeof(addr)) < 0) {
        perror("Unable to bind");
        exit(EXIT_FAILURE);
    }

    if (listen(s, 1) < 0) {
        perror("Unable to listen");
        exit(EXIT_FAILURE);
    }

    return s;
}

static unsigned int psk_server_cb(SSL *ssl, const char *identity,
                                  unsigned char *psk,
                                  unsigned int max_psk_len) {
    long key_len = 0;
    // unsigned char *key;
    printf("xxxxxxxxxxxxx psk_server_cb\n");

    if (identity == NULL) {
        printf("Error: client did not send PSK identity\n");
        return 0;
    }

    /* here we could lookup the given identity e.g. from a database */
    if (strcmp(identity, PSK_ID) != 0) {
        printf("PSK warning: client identity not what we expected"
               " (got '%s' expected '%s')\n",
               identity, PSK_ID);
        return 0;
    }

    /* convert the PSK key to binary */
    unsigned char *key_utf8 = (unsigned char *)PSK_UTF8_KEY;
    key_len                 = strlen(PSK_UTF8_KEY);
    if (key_len > (int)max_psk_len) {
        printf("psk buffer of callback is too small (%d) for key (%ld)\n",
               max_psk_len, key_len);
        return 0;
    }

    memcpy(psk, key_utf8, key_len);

    printf("xxxxxxxxxxxxx psk_server_cb end:%ld\n", key_len);
    return key_len;
}

static int psk_find_session_cb(SSL *ssl, const unsigned char *identity,
                               size_t identity_len, SSL_SESSION **sess) {
    SSL_SESSION *tmpsess = NULL;
    // unsigned char *key;
    unsigned char *key_utf8;
    long key_len;

    printf("xxxxxxxxx psk_find_session_cb\n");
    if (strlen(PSK_ID) != identity_len || memcmp(PSK_ID, identity, identity_len) != 0) {
        printf("PSK ID len %ld", strlen(PSK_ID));
        *sess = NULL;
        return 1;
    }

    // key = OPENSSL_hexstr2buf(PSK_KEY, &key_len);
    // if (key == NULL) {
    //     report_error("Could not convert PSK key to buffer\n");
    //     return 0;
    // }
    key_utf8 = (unsigned char *)PSK_UTF8_KEY;
    key_len  = strlen(PSK_UTF8_KEY);

    const SSL_CIPHER *cipher                       = NULL;
    const unsigned char tls13_aes128gcmsha256_id[] = {0x13, 0x01};
    const unsigned char tls13_aes256gcmsha384_id[] = {0x13, 0x02};

    cipher = SSL_CIPHER_find(ssl, tls13_aes256gcmsha384_id); // 384是自协商成功
    // cipher = SSL_CIPHER_find(ssl, tls13_aes128gcmsha256_id);//256是openssl默认的hash算法
    if (cipher == NULL) {
        report_error("Error finding suitable ciphersuite\n");
        // OPENSSL_free(key);
        return 0;
    }

    tmpsess = SSL_SESSION_new();
    if (tmpsess == NULL || !SSL_SESSION_set1_master_key(tmpsess, key_utf8, key_len) || !SSL_SESSION_set_cipher(tmpsess, cipher) || !SSL_SESSION_set_protocol_version(tmpsess, SSL_version(ssl))) {
        report_error("Session set error\n");
        // OPENSSL_free(key);
        return 0;
    }
    // OPENSSL_free(key);
    *sess = tmpsess;

    printf("xxxxxxxxx psk_find_session_cb end\n");
    return 1;
}

static int serverNameCallback(SSL *ssl, int *ad, void *arg) {
    if (ssl == NULL)
        return SSL_TLSEXT_ERR_NOACK;

    const char *servername = SSL_get_servername(ssl, TLSEXT_NAMETYPE_host_name);
    if (servername && strlen(servername) > 0) {
        // 从g_ctxMap中找到servername对应的SSL_CTX
        printf("server name is %s\n", servername);
    } else {
        // 选一个默认的SSL_CTX
        printf("server name is NULL\n");
    }

    return SSL_TLSEXT_ERR_OK;
}

static unsigned char ocsp_rspder[] = {
    0x30, 0x82, 0x06, 0x37, 0x0a, 0x01, 0x00, 0xa0, 0x82, 0x06, 0x30, 0x30,
    0x82, 0x06, 0x2c, 0x06, 0x09, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30,
    0x01, 0x01, 0x04, 0x82, 0x06, 0x1d, 0x30, 0x82, 0x06, 0x19, 0x30, 0x82,
    0x01, 0x18, 0xa0, 0x03, 0x02, 0x01, 0x00, 0xa1, 0x81, 0x8a, 0x30, 0x81,
    0x87, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02,
    0x55, 0x53, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13,
    0x0e, 0x56, 0x65, 0x72, 0x69, 0x53, 0x69, 0x67, 0x6e, 0x2c, 0x20, 0x49,
    0x6e, 0x63, 0x2e, 0x31, 0x1f, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x04, 0x0b,
    0x13, 0x16, 0x56, 0x65, 0x72, 0x69, 0x53, 0x69, 0x67, 0x6e, 0x20, 0x54,
    0x72, 0x75, 0x73, 0x74, 0x20, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
    0x31, 0x3e, 0x30, 0x3c, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x35, 0x56,
    0x65, 0x72, 0x69, 0x53, 0x69, 0x67, 0x6e, 0x20, 0x43, 0x6c, 0x61, 0x73,
    0x73, 0x20, 0x33, 0x20, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x20, 0x53,
    0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x43, 0x41, 0x20, 0x2d, 0x20, 0x47,
    0x32, 0x20, 0x4f, 0x43, 0x53, 0x50, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f,
    0x6e, 0x64, 0x65, 0x72, 0x18, 0x0f, 0x32, 0x30, 0x31, 0x31, 0x30, 0x36,
    0x30, 0x38, 0x31, 0x36, 0x31, 0x39, 0x35, 0x38, 0x5a, 0x30, 0x73, 0x30,
    0x71, 0x30, 0x49, 0x30, 0x09, 0x06, 0x05, 0x2b, 0x0e, 0x03, 0x02, 0x1a,
    0x05, 0x00, 0x04, 0x14, 0x6c, 0x2b, 0xc5, 0x5a, 0xaf, 0x8d, 0x96, 0xbf,
    0x60, 0xad, 0xf8, 0x1d, 0x02, 0x3f, 0x23, 0xb4, 0x8a, 0x00, 0x59, 0xc2,
    0x04, 0x14, 0xa5, 0xef, 0x0b, 0x11, 0xce, 0xc0, 0x41, 0x03, 0xa3, 0x4a,
    0x65, 0x90, 0x48, 0xb2, 0x1c, 0xe0, 0x57, 0x2d, 0x7d, 0x47, 0x02, 0x10,
    0x30, 0x11, 0x9e, 0x6e, 0xf4, 0x1b, 0xdb, 0xa3, 0xfe, 0xfe, 0x71, 0x1d,
    0xbe, 0x8f, 0x61, 0x91, 0x80, 0x00, 0x18, 0x0f, 0x32, 0x30, 0x31, 0x31,
    0x30, 0x36, 0x30, 0x38, 0x31, 0x36, 0x31, 0x39, 0x35, 0x38, 0x5a, 0xa0,
    0x11, 0x18, 0x0f, 0x32, 0x30, 0x31, 0x31, 0x30, 0x36, 0x31, 0x35, 0x31,
    0x36, 0x31, 0x39, 0x35, 0x38, 0x5a, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86,
    0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05, 0x05, 0x00, 0x03, 0x81, 0x81,
    0x00, 0x13, 0x96, 0xc6, 0xb0, 0xd5, 0xbf, 0xbd, 0x86, 0x24, 0x2d, 0x7d,
    0x66, 0x04, 0x56, 0x76, 0x4d, 0x8d, 0xc9, 0x7c, 0xb2, 0xa3, 0x89, 0xeb,
    0xb0, 0x49, 0x43, 0x96, 0x85, 0xec, 0xc7, 0xa5, 0xa2, 0x31, 0x39, 0x7c,
    0x42, 0x1a, 0x6e, 0x96, 0x16, 0x37, 0x1b, 0xf9, 0x1b, 0xdc, 0x17, 0xb6,
    0x50, 0x50, 0xcb, 0x19, 0x33, 0x9b, 0x3e, 0xe4, 0xe0, 0x0c, 0x0e, 0x03,
    0x58, 0x88, 0x6d, 0xc6, 0x6f, 0xd6, 0x30, 0x8a, 0xb3, 0x62, 0xdc, 0x28,
    0xb5, 0x46, 0x3f, 0x4a, 0x23, 0x9d, 0x06, 0x07, 0x69, 0xc8, 0x6e, 0xcc,
    0x31, 0xb6, 0x74, 0x8b, 0xe9, 0x04, 0xf6, 0xf4, 0xff, 0xec, 0x32, 0xd7,
    0xe0, 0x6b, 0xb2, 0x47, 0x17, 0x60, 0x27, 0x51, 0xae, 0x81, 0x22, 0xce,
    0x0c, 0x4a, 0x1a, 0x26, 0x91, 0xa0, 0x25, 0xd3, 0x48, 0xa5, 0x2f, 0x45,
    0x49, 0x4d, 0x0f, 0x0e, 0x78, 0x16, 0xcc, 0x82, 0x5d, 0xa0, 0x82, 0x04,
    0x66, 0x30, 0x82, 0x04, 0x62, 0x30, 0x82, 0x04, 0x5e, 0x30, 0x82, 0x03,
    0x46, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x10, 0x7a, 0xa6, 0x30, 0x92,
    0x98, 0x6d, 0xf4, 0xa5, 0x71, 0x6f, 0x99, 0x3e, 0xc7, 0xa8, 0x3f, 0xff,
    0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01,
    0x05, 0x05, 0x00, 0x30, 0x81, 0xb5, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03,
    0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x17, 0x30, 0x15, 0x06,
    0x03, 0x55, 0x04, 0x0a, 0x13, 0x0e, 0x56, 0x65, 0x72, 0x69, 0x53, 0x69,
    0x67, 0x6e, 0x2c, 0x20, 0x49, 0x6e, 0x63, 0x2e, 0x31, 0x1f, 0x30, 0x1d,
    0x06, 0x03, 0x55, 0x04, 0x0b, 0x13, 0x16, 0x56, 0x65, 0x72, 0x69, 0x53,
    0x69, 0x67, 0x6e, 0x20, 0x54, 0x72, 0x75, 0x73, 0x74, 0x20, 0x4e, 0x65,
    0x74, 0x77, 0x6f, 0x72, 0x6b, 0x31, 0x3b, 0x30, 0x39, 0x06, 0x03, 0x55,
    0x04, 0x0b, 0x13, 0x32, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x20, 0x6f, 0x66,
    0x20, 0x75, 0x73, 0x65, 0x20, 0x61, 0x74, 0x20, 0x68, 0x74, 0x74, 0x70,
    0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x76, 0x65, 0x72, 0x69,
    0x73, 0x69, 0x67, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x70, 0x61,
    0x20, 0x28, 0x63, 0x29, 0x30, 0x39, 0x31, 0x2f, 0x30, 0x2d, 0x06, 0x03,
    0x55, 0x04, 0x03, 0x13, 0x26, 0x56, 0x65, 0x72, 0x69, 0x53, 0x69, 0x67,
    0x6e, 0x20, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x20, 0x33, 0x20, 0x53, 0x65,
    0x63, 0x75, 0x72, 0x65, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20,
    0x43, 0x41, 0x20, 0x2d, 0x20, 0x47, 0x32, 0x30, 0x1e, 0x17, 0x0d, 0x31,
    0x31, 0x30, 0x35, 0x32, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a,
    0x17, 0x0d, 0x31, 0x31, 0x30, 0x38, 0x31, 0x39, 0x32, 0x33, 0x35, 0x39,
    0x35, 0x39, 0x5a, 0x30, 0x81, 0x87, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03,
    0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x17, 0x30, 0x15, 0x06,
    0x03, 0x55, 0x04, 0x0a, 0x13, 0x0e, 0x56, 0x65, 0x72, 0x69, 0x53, 0x69,
    0x67, 0x6e, 0x2c, 0x20, 0x49, 0x6e, 0x63, 0x2e, 0x31, 0x1f, 0x30, 0x1d,
    0x06, 0x03, 0x55, 0x04, 0x0b, 0x13, 0x16, 0x56, 0x65, 0x72, 0x69, 0x53,
    0x69, 0x67, 0x6e, 0x20, 0x54, 0x72, 0x75, 0x73, 0x74, 0x20, 0x4e, 0x65,
    0x74, 0x77, 0x6f, 0x72, 0x6b, 0x31, 0x3e, 0x30, 0x3c, 0x06, 0x03, 0x55,
    0x04, 0x03, 0x13, 0x35, 0x56, 0x65, 0x72, 0x69, 0x53, 0x69, 0x67, 0x6e,
    0x20, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x20, 0x33, 0x20, 0x53, 0x65, 0x63,
    0x75, 0x72, 0x65, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x43,
    0x41, 0x20, 0x2d, 0x20, 0x47, 0x32, 0x20, 0x4f, 0x43, 0x53, 0x50, 0x20,
    0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x30, 0x81, 0x9f,
    0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01,
    0x01, 0x05, 0x00, 0x03, 0x81, 0x8d, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81,
    0x81, 0x00, 0xf4, 0x0d, 0x10, 0xcd, 0xc8, 0x00, 0x0e, 0x71, 0xc2, 0x1a,
    0x6e, 0xc9, 0x0d, 0x20, 0x92, 0x82, 0xed, 0x9b, 0xa7, 0xa6, 0x8f, 0x36,
    0xd9, 0xa0, 0x22, 0x23, 0x44, 0xdf, 0x4f, 0xca, 0xde, 0xb4, 0x99, 0x63,
    0x94, 0xe1, 0xdf, 0x45, 0xf0, 0x32, 0xb4, 0x5e, 0x73, 0x63, 0x11, 0x43,
    0xc1, 0xa1, 0x5f, 0xda, 0xe2, 0x8b, 0xfb, 0x66, 0xa5, 0xa3, 0x1c, 0xc2,
    0x54, 0x7b, 0x35, 0xae, 0x45, 0x57, 0x5f, 0x90, 0xb4, 0x8e, 0x7d, 0x38,
    0x2f, 0x04, 0x81, 0xf9, 0x22, 0xa0, 0xe0, 0xee, 0x60, 0x8b, 0xc8, 0x9b,
    0xdd, 0xdf, 0xdc, 0xaa, 0x0b, 0x39, 0xad, 0xee, 0x19, 0x01, 0xe2, 0xbc,
    0x1a, 0xb9, 0x8f, 0x4e, 0xab, 0x7b, 0x90, 0x40, 0xeb, 0x08, 0x38, 0xd7,
    0x9e, 0xfe, 0xfb, 0xc3, 0xa5, 0xd9, 0x08, 0xfb, 0x57, 0x09, 0xd3, 0x67,
    0xb3, 0x46, 0x55, 0x66, 0x16, 0x0a, 0x0d, 0x72, 0xd0, 0x19, 0x02, 0x03,
    0x01, 0x00, 0x01, 0xa3, 0x82, 0x01, 0x18, 0x30, 0x82, 0x01, 0x14, 0x30,
    0x09, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x04, 0x02, 0x30, 0x00, 0x30, 0x81,
    0xac, 0x06, 0x03, 0x55, 0x1d, 0x20, 0x04, 0x81, 0xa4, 0x30, 0x81, 0xa1,
    0x30, 0x81, 0x9e, 0x06, 0x0b, 0x60, 0x86, 0x48, 0x01, 0x86, 0xf8, 0x45,
    0x01, 0x07, 0x17, 0x03, 0x30, 0x81, 0x8e, 0x30, 0x28, 0x06, 0x08, 0x2b,
    0x06, 0x01, 0x05, 0x05, 0x07, 0x02, 0x01, 0x16, 0x1c, 0x68, 0x74, 0x74,
    0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x76, 0x65, 0x72,
    0x69, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x50,
    0x53, 0x30, 0x62, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x02,
    0x02, 0x30, 0x56, 0x30, 0x15, 0x16, 0x0e, 0x56, 0x65, 0x72, 0x69, 0x53,
    0x69, 0x67, 0x6e, 0x2c, 0x20, 0x49, 0x6e, 0x63, 0x2e, 0x30, 0x03, 0x02,
    0x01, 0x01, 0x1a, 0x3d, 0x56, 0x65, 0x72, 0x69, 0x53, 0x69, 0x67, 0x6e,
    0x27, 0x73, 0x20, 0x43, 0x50, 0x53, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72,
    0x70, 0x2e, 0x20, 0x62, 0x79, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
    0x6e, 0x63, 0x65, 0x20, 0x6c, 0x69, 0x61, 0x62, 0x2e, 0x20, 0x6c, 0x74,
    0x64, 0x2e, 0x20, 0x28, 0x63, 0x29, 0x39, 0x37, 0x20, 0x56, 0x65, 0x72,
    0x69, 0x53, 0x69, 0x67, 0x6e, 0x30, 0x13, 0x06, 0x03, 0x55, 0x1d, 0x25,
    0x04, 0x0c, 0x30, 0x0a, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07,
    0x03, 0x09, 0x30, 0x0b, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03,
    0x02, 0x07, 0x80, 0x30, 0x0f, 0x06, 0x09, 0x2b, 0x06, 0x01, 0x05, 0x05,
    0x07, 0x30, 0x01, 0x05, 0x04, 0x02, 0x05, 0x00, 0x30, 0x25, 0x06, 0x03,
    0x55, 0x1d, 0x11, 0x04, 0x1e, 0x30, 0x1c, 0xa4, 0x1a, 0x30, 0x18, 0x31,
    0x16, 0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x0d, 0x4f, 0x43,
    0x53, 0x50, 0x38, 0x2d, 0x54, 0x47, 0x56, 0x37, 0x2d, 0x35, 0x35, 0x30,
    0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05,
    0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x6d, 0x08, 0x61, 0x33, 0xf7,
    0xdd, 0xc9, 0xcf, 0xb5, 0x47, 0xca, 0x84, 0xd5, 0xb4, 0x77, 0xaf, 0xfa,
    0x82, 0xae, 0x94, 0x80, 0x9b, 0xc6, 0xf5, 0x95, 0xfd, 0x24, 0x26, 0xb9,
    0x51, 0x11, 0x31, 0x30, 0x65, 0x6a, 0xcf, 0xd4, 0x42, 0xcf, 0x0f, 0x1f,
    0x8b, 0x6f, 0xde, 0x29, 0x73, 0x69, 0x87, 0x0c, 0x94, 0xff, 0x65, 0x57,
    0xbe, 0xa5, 0xb0, 0x3d, 0x82, 0x2d, 0x3c, 0x54, 0xfe, 0xe2, 0x37, 0x1f,
    0xf6, 0x76, 0x92, 0x73, 0x0d, 0x8f, 0xf2, 0xa1, 0x5e, 0x74, 0xdc, 0x76,
    0x50, 0xba, 0x1f, 0xc7, 0xb9, 0x04, 0x8d, 0x18, 0x2c, 0xa7, 0x1e, 0xc0,
    0x27, 0xce, 0xf2, 0x2e, 0x26, 0x7d, 0x98, 0xd9, 0x35, 0x16, 0x87, 0x31,
    0x37, 0xef, 0x6b, 0xa2, 0x27, 0x04, 0x8f, 0x30, 0x43, 0x13, 0xe4, 0x64,
    0x09, 0x99, 0x64, 0x87, 0xc3, 0xab, 0x66, 0x23, 0x1a, 0x52, 0xc7, 0x4b,
    0x60, 0x49, 0x93, 0x1e, 0x10, 0xfe, 0xa8, 0xfd, 0xbd, 0x13, 0x4e, 0xfc,
    0x83, 0x19, 0x75, 0x7b, 0x56, 0xe1, 0xdf, 0x11, 0x02, 0x12, 0x00, 0xe6,
    0x71, 0x26, 0x25, 0x6d, 0xf9, 0x01, 0x37, 0x38, 0x62, 0x1b, 0x65, 0x30,
    0xf7, 0x5e, 0x37, 0x7c, 0xca, 0x36, 0x0f, 0xcf, 0x10, 0x51, 0xb2, 0xaa,
    0xf7, 0x47, 0xfd, 0xcc, 0xde, 0xca, 0x95, 0x69, 0x6e, 0x2a, 0x99, 0xc9,
    0xaf, 0xc4, 0xc0, 0xb8, 0xf8, 0x53, 0x70, 0x5c, 0x4a, 0x2d, 0x79, 0x8f,
    0x82, 0x34, 0xca, 0x94, 0x8d, 0x3f, 0xad, 0x0a, 0xbd, 0x6c, 0x9a, 0x54,
    0xba, 0x10, 0xed, 0x17, 0xaf, 0xad, 0x19, 0xe5, 0xf3, 0x54, 0x76, 0xc7,
    0x45, 0xcf, 0x8d, 0x43, 0xfd, 0x2b, 0x04, 0x32, 0x49, 0xb3, 0x8f, 0xb3,
    0xdd, 0x6f, 0x00, 0xe8, 0xba, 0xf3, 0x78, 0x1a, 0xf7, 0x19, 0x1d, 0x23,
    0x56, 0x51, 0x0b, 0x00, 0x20, 0x1c, 0x3c, 0x9c, 0x99, 0xe3, 0x05};

static int cert_status_cb(SSL *s, void *arg) {
    unsigned char *rspder = NULL;
    int rspderlen         = sizeof(ocsp_rspder);

    rspder = (unsigned char *)malloc(rspderlen);
    memcpy(rspder, ocsp_rspder, rspderlen);
    // rspder并非在此函数调用时拷贝，而是后续发送时使用，并且openssl会自动释放rspder
    SSL_set_tlsext_status_ocsp_resp(s, rspder, rspderlen);
    printf("send ocsp response. len:%d\n", rspderlen);
    return SSL_TLSEXT_ERR_OK;
}

void SslInit() {
#if OPENSSL_VERSION_NUMBER >= 0x1010000fL
    /* No explicit initialization is required. */
#elif defined(OPENSSL_IS_BORINGSSL)
    CRYPTO_library_init();
#else  /* !(OPENSSL_VERSION_NUMBER >= 0x1010000fL) && \
          !defined(OPENSSL_IS_BORINGSSL) */
    OPENSSL_config(NULL);
    SSL_load_error_strings();
    SSL_library_init();
    OpenSSL_add_all_algorithms();
#endif /* !(OPENSSL_VERSION_NUMBER >= 0x1010000fL) && \
          !defined(OPENSSL_IS_BORINGSSL) */
    return;
}

SSL_CTX *create_context() {
    const SSL_METHOD *method;
    SSL_CTX *ctx;

    method = TLS_server_method();
    ctx    = SSL_CTX_new(method);
    if (!ctx) {
        perror("Unable to create SSL context");
        ERR_print_errors_fp(stderr);
        exit(EXIT_FAILURE);
    }

    return ctx;
}

// /* Structure passed to cert status callback */
// typedef struct tlsextstatusctx_st {
//     int timeout;
//     /* File to load OCSP Response from (or NULL if no file) */
//     char *respin;
//     /* Default responder to use */
//     char *host, *path, *port;
//     char *proxy, *no_proxy;
//     int use_ssl;
//     int verbose;
// } tlsextstatusctx;

// # define FORMAT_ASN1     4                      /* ASN.1/DER */

// static int cert_status_cb(SSL *s, void *arg)
// {
//     tlsextstatusctx *srctx = (tlsextstatusctx *)arg;
//     OCSP_RESPONSE *resp = NULL;
//     unsigned char *rspder = NULL;
//     int rspderlen;
//     int ret = SSL_TLSEXT_ERR_ALERT_FATAL;

//     if (srctx->verbose)
//         //BIO_puts(bio_err, "cert_status: callback called\n");

//     if (srctx->respin != NULL) {
//         BIO *derbio = bio_open_default(srctx->respin, 'r', FORMAT_ASN1);
//         if (derbio == NULL) {
//             BIO_puts(bio_err, "cert_status: Cannot open OCSP response
//             file\n"); goto err;
//         }
//         resp = d2i_OCSP_RESPONSE_bio(derbio, NULL);
//         BIO_free(derbio);
//         if (resp == NULL) {
//             BIO_puts(bio_err, "cert_status: Error reading OCSP response\n");
//             goto err;
//         }
//     } else {
//         ret = get_ocsp_resp_from_responder(s, srctx, &resp);
//         if (ret != SSL_TLSEXT_ERR_OK)
//             goto err;
//     }

//     rspderlen = i2d_OCSP_RESPONSE(resp, &rspder);
//     if (rspderlen <= 0)
//         goto err;

//     SSL_set_tlsext_status_ocsp_resp(s, rspder, rspderlen);
//     if (srctx->verbose) {
//         BIO_puts(bio_err, "cert_status: ocsp response sent:\n");
//         OCSP_RESPONSE_print(bio_err, resp, 2);
//     }

//     ret = SSL_TLSEXT_ERR_OK;

//  err:
//     if (ret != SSL_TLSEXT_ERR_OK)
//         ERR_print_errors(bio_err);

//     OCSP_RESPONSE_free(resp);

//     return ret;
// }

// tls1.3 default cipher list is TLS_DEFAULT_CIPHERSUITES, define in openssl:
/*
#  define TLS_DEFAULT_CIPHERSUITES "TLS_AES_256_GCM_SHA384:" \
                                   "TLS_CHACHA20_POLY1305_SHA256:" \
                                   "TLS_AES_128_GCM_SHA256"
*/

const char default_cipher_tlsv1_2_list[] =
    // 下面全是按照3GPP TS 33.210第6.2节建议添加
    "ECDHE-ECDSA-AES128-GCM-SHA256:"
    "DHE-RSA-AES128-GCM-SHA256:"
    "ECDHE-ECDSA-AES256-GCM-SHA384:"
    "ECDHE-RSA-AES256-GCM-SHA384:"
    "DHE-PSK-AES128-GCM-SHA256:"
    "DHE-PSK-AES256-GCM-SHA384:"

    // 默认配置下符合的3GPP TS 33.210第6.2节要求
    "DHE-RSA-AES256-GCM-SHA384:"
    "ECDHE-ECDSA-CHACHA20-POLY1305-SHA256:"
    "ECDHE-RSA-CHACHA20-POLY1305-SHA256:"
    "DHE-RSA-CHACHA20-POLY1305-SHA256:"
    "ECDHE-RSA-AES128-GCM-SHA256:"

    // psk-系列的套件，是按照5gc对接iwf需求增加的
    "PSK-AES128-GCM-SHA256:"
    "PSK-AES256-GCM-SHA384:"
    "PSK-CHACHA20-POLY1305:"
    // PSK-AES128-CBC-SHA256属于TLSv1的版本，目前禁用的tlsv1，如果服务端支持此套件，还是能协商成功
    "PSK-AES128-CBC-SHA256:"

    // ECDHE-PSK-AESxxx-GCM-SHAxxx(最后两个)在openssl 1.1.1f里没有
    "ECDHE-PSK-AES128-GCM-SHA256:"
    "ECDHE-PSK-AES256-GCM-SHA384";

void configure_context(SSL_CTX *ctx) {
    SSL_CTX_set_options(
        ctx,
        SSL_OP_ALL | SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3 | SSL_OP_NO_DTLSv1 |
            // 用1.3
            // SSL_OP_NO_TLSv1_1 |
            // 用1.2
              SSL_OP_NO_TLSv1_1 |SSL_OP_NO_TLSv1_3 |
            SSL_OP_NO_COMPRESSION | SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION);
    if (SSL_CTX_set_cipher_list(
            // ctx, "PSK-AES128-GCM-SHA256") != 1) {
            ctx, default_cipher_tlsv1_2_list)
        != 1) {
        report_error("Set cipher list failed");
        return;
    }
    // if (SSL_CTX_set_ciphersuites(
    //         // ctx, "ALL:!COMPLEMENTOFDEFAULT:!eNULL:!SHA") != 1) {
    //         ctx, TLS_DEFAULT_CIPHERSUITES) != 1) {
    //      report_error("Set cipher list failedxx");
    //     return ;
    // }
    // SSL_CTX_set_tlsext_status_cb(ctx, cert_status_cb);

    // TLS1_3_VERSION
    //  if (SSL_CTX_set_min_proto_version(ctx, TLS1_2_VERSION) == 0) {
    //      report_error("Set ssl min version failed");
    //      return;
    //  }
    //  if (SSL_CTX_set_max_proto_version(ctx, TLS1_3_VERSION) == 0) {
    //      report_error("Set ssl max version failed");
    //      return;
    //  }

#ifndef USEING_PSK
    // if (SSL_CTX_use_PrivateKey_file(ctx, "./5gc.key", SSL_FILETYPE_PEM) != 1)
    if (SSL_CTX_use_PrivateKey_file(ctx, "./iwf.key", SSL_FILETYPE_PEM) != 1)
    {
        report_error("Could not read private key file");
        return;
    }
    // if (SSL_CTX_use_certificate_file(ctx, "./5gc.crt", SSL_FILETYPE_PEM) != 1)
    if (SSL_CTX_use_certificate_file(ctx, "./iwf.crt", SSL_FILETYPE_PEM) != 1)
    {
        // if (SSL_CTX_use_certificate_chain_file(ssl_ctx, cert_file) != 1) {
        report_error("Could not read certificate file");
        return;
    }
    /* 检查用户私钥是否正确 */
    if (!SSL_CTX_check_private_key(ctx)) {
        report_error("Check private key failed");
        return;
    }
#else
    // determine ciphersuite to use
    // if (CURR_CIPHERSUITES == AES256SHA384) {
    //     SSL_CTX_set_ciphersuites(ctx, "TLS_AES_256_GCM_SHA384");
    // }
    // else if (CURR_CIPHERSUITES == AES128SHA256) {
    //     SSL_CTX_set_ciphersuites(ctx, "TLS_AES_128_GCM_SHA256");
    // }
    // else {
    //     report_error("Error ciphersuites define setting\n");
    // }
#endif
}

void showCiphers(SSL_CTX *ctx) {
    STACK_OF(SSL_CIPHER) * ciphers;
    int i   = 0;
    ciphers = SSL_CTX_get_ciphers(ctx);
    printf("ssl ctx cipher lists:\n");
    for (i = 0; i < sk_SSL_CIPHER_num(ciphers); i++) {
        const SSL_CIPHER *cipher = sk_SSL_CIPHER_value(ciphers, i);
        const char *cipher_name  = SSL_CIPHER_get_name(cipher);

        printf("%s:", cipher_name);
    }
    printf("\n");
}

void showSSLCiphers(SSL *ssl) {
    STACK_OF(SSL_CIPHER) * ciphers;
    int i   = 0;
    ciphers = SSL_get1_supported_ciphers(ssl);
    printf("ssl enable cipher lists:\n");
    for (i = 0; i < sk_SSL_CIPHER_num(ciphers); i++) {
        const SSL_CIPHER *cipher = sk_SSL_CIPHER_value(ciphers, i);
        const char *cipher_name  = SSL_CIPHER_get_name(cipher);

        printf("%s:", cipher_name);
    }
    printf("\n");
}

void showGetSharedCiphers(SSL *ssl) {
    STACK_OF(SSL_CIPHER) * ciphers;
    char buf[1024];
    int i = 0;
    SSL_get_shared_ciphers(ssl, buf, sizeof(buf));
    printf("Shared ciphers are: %s\n", buf);
}

void showClientCiphers(SSL *ssl) {
    STACK_OF(SSL_CIPHER) * ciphers;
    int i   = 0;
    ciphers = SSL_get_client_ciphers(ssl);
    printf("ssl client cipher lists:\n");
    for (i = 0; i < sk_SSL_CIPHER_num(ciphers); i++) {
        const SSL_CIPHER *cipher = sk_SSL_CIPHER_value(ciphers, i);
        const char *cipher_name  = SSL_CIPHER_get_name(cipher);

        printf("%s:", cipher_name);
    }
    printf("\n");
}

static unsigned int dummy_psk(SSL *ssl, const char *hint, char *identity,
                              unsigned int max_identity_len, unsigned char *psk,
                              unsigned int max_psk_len) {
    return 0;
}

void ShowCerts(SSL *ssl) {
    X509 *cert;
    char *line;

    // 获取证书并返回X509操作句柄
    cert = SSL_get_peer_certificate(ssl);
    if (cert != NULL) {
        printf("client数字证书信息:\n");
        line = X509_NAME_oneline(X509_get_subject_name(cert), 0, 0);
        printf("证书: %s\n", line);
        free(line);
        line = X509_NAME_oneline(X509_get_issuer_name(cert), 0, 0);
        printf("颁发者: %s\n\n", line);
        free(line);
        X509_free(cert);
        printf("对client证书验证通过!!!\n");
    } else {
        printf("无证书信息,对client证书验证失败!!!\n");
    }
}

static const char *get_sigtype(int nid) {
    switch (nid) {
    case EVP_PKEY_RSA:
        return "RSA";

    case EVP_PKEY_RSA_PSS:
        return "RSA-PSS";

    case EVP_PKEY_DSA:
        return "DSA";

    case EVP_PKEY_EC:
        return "ECDSA";

    case NID_ED25519:
        return "Ed25519";

    case NID_ED448:
        return "Ed448";

    case NID_id_GostR3410_2001:
        return "gost2001";

    case NID_id_GostR3410_2012_256:
        return "gost2012_256";

    case NID_id_GostR3410_2012_512:
        return "gost2012_512";

    default:
        return NULL;
    }
}

static int do_print_sigalgs(SSL *s, int shared) {
    int i, nsig, client;

    printf("Print sigalgs:\n");
    client = SSL_is_server(s) ? 0 : 1;
    if (shared)
        nsig = SSL_get_shared_sigalgs(s, 0, NULL, NULL, NULL, NULL, NULL);
    else
        nsig = SSL_get_sigalgs(s, -1, NULL, NULL, NULL, NULL, NULL);
    if (nsig == 0)
        return 1;

    if (shared)
        printf("Shared ");

    if (client)
        printf("Requested ");
    printf("Signature Algorithms: ");
    for (i = 0; i < nsig; i++) {
        int hash_nid, sign_nid;
        unsigned char rhash, rsign;
        const char *sstr = NULL;
        if (shared)
            SSL_get_shared_sigalgs(s, i, &sign_nid, &hash_nid, NULL,
                                   &rsign, &rhash);
        else
            SSL_get_sigalgs(s, i, &sign_nid, &hash_nid, NULL, &rsign, &rhash);
        if (i)
            printf(":");
        sstr = get_sigtype(sign_nid);
        if (sstr)
            printf("%s", sstr);
        else
            printf("0x%02X", (int)rsign);
        if (hash_nid != NID_undef)
            printf("+%s", OBJ_nid2sn(hash_nid));
        else if (sstr == NULL)
            printf("+0x%02X", (int)rhash);
    }
    printf("\n");
    return 1;
}

int main(int argc, char **argv) {
    int sock;
    SSL_CTX *ctx;
    SslInit();

    ctx = create_context();
    configure_context(ctx);

    sock = create_socket(4433);
    printf("Server starting up 4433...\n");

#ifdef USEING_PSK
    printf("Using PSK\n");
    // 必须调用此函数，协商的报文才会携带PSK相关函数，并且兼容tls1.3，和SSL_CTX_set_psk_find_session_callback二选一
    SSL_CTX_set_psk_server_callback(ctx, psk_server_cb);
    // 主要是tls1.3后的psk相关函数，如果只支持tls1.3，则只用此函数
    //  SSL_CTX_set_psk_find_session_callback(ctx, psk_find_session_cb);
    //  SSL_CTX_set_tlsext_servername_callback(ctx, serverNameCallback);//SNI
#else
    printf("Using CERT\n");
    SSL_CTX_set_tlsext_status_cb(ctx, cert_status_cb);               // OCSP
    SSL_CTX_set_tlsext_servername_callback(ctx, serverNameCallback); // SNI

    // 双向验证
    // SSL_VERIFY_PEER---要求对证书进行认证，没有证书也会放行
    // SSL_VERIFY_FAIL_IF_NO_PEER_CERT---要求客户端需要提供证书，如果客户端不提供证书，握手失败
    SSL_CTX_set_verify(ctx, SSL_VERIFY_PEER | SSL_VERIFY_FAIL_IF_NO_PEER_CERT,
    // SSL_CTX_set_verify(ctx, SSL_VERIFY_PEER ,
                       NULL);
    // 设置信任根证书
    if (SSL_CTX_load_verify_locations(ctx, "5gc_ca.crt",NULL)<=0){
    // if (SSL_CTX_load_verify_locations(ctx, "iwf_ca.crt", NULL) <= 0) {
    // if (SSL_CTX_load_verify_locations(ctx, "/root/tmp/client_ca.crt", NULL) <= 0) {
        printf("unable to load verify crt.\n");
        return -2;
    }

#endif

    showCiphers(ctx);

    printf("================================\n");
    int count = 0;

    /* Handle connections */
    while (1) {
        count += 1;
        const char reply[] = "ggggggggg ssl test\n";

        struct sockaddr_in addr;
        socklen_t len = sizeof(addr);
        int client    = accept(sock, (struct sockaddr *)&addr, &len);
        if (client < 0) {
            perror("Unable to accept");
            exit(EXIT_FAILURE);
        }

        SSL *ssl;
        ssl = SSL_new(ctx);
        //     if (SSL_set_cipher_list(            ssl, "ALL:!SHA") != 1) {
        //      report_error("Set cipher list failed");
        //     return 0;
        // }
        SSL_set_fd(ssl, client);

        BIO *accept_bio = BIO_new_socket(client, BIO_CLOSE);
        SSL_set_bio(ssl, accept_bio, accept_bio);

        BIO *bio = BIO_pop(accept_bio);

        showSSLCiphers(ssl);

        if (SSL_accept(ssl) <= 0) {
            int nid;
            printf("accept error\n");
            showClientCiphers(ssl);
            showGetSharedCiphers(ssl);
            do_print_sigalgs(ssl, 1);
            //          if (SSL_get_peer_signature_nid(ssl, &nid) && nid != NID_undef)
            //     printf("Peer signing digest: %d\n", nid);
            // if (SSL_get_peer_signature_type_nid(ssl, &nid))
            //     printf("Peer signature type: %d\n",nid);
            ERR_print_errors_fp(stderr);
        } else {
#ifndef USEING_PSK
            // 获取校验结果，实际上在握手阶段就会执行校验
            long verify_result = SSL_get_verify_result(ssl);
            printf("Verify return code: %ld (%s)\n", verify_result,
                   X509_verify_cert_error_string(verify_result));

            ShowCerts(ssl);
#endif
            showClientCiphers(ssl);
            showGetSharedCiphers(ssl);
            do_print_sigalgs(ssl, 1);
            printf(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n");
            SSL_write(ssl, reply, strlen(reply));
            printf("receive a connection: %d\n", count);
        }

        SSL_shutdown(ssl);
        printf("connection closed.\n");
        // SSL_free(ssl);
        printf("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");
    }
}